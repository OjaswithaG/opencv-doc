"""
üîÑ OpenCV Geometrik Transformasyonlar
====================================

Bu dosyada resimler √ºzerinde geometrik d√∂n√º≈ü√ºmler √∂ƒüreneceksiniz:
- D√∂nd√ºrme (rotation)
- √ñl√ßekleme (scaling) 
- √ñteleme (translation)
- Perspektif d√ºzeltme
- Affine transformasyonlar

Yazan: Eren Terzi
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
from pathlib import Path

def ornek_resim_olustur():
    """Test i√ßin √∂rnek resimler olu≈ütur"""
    examples_dir = Path("examples")
    examples_dir.mkdir(exist_ok=True)
    
    # Basit geometrik ≈üekiller i√ßeren resim
    resim = np.zeros((400, 400, 3), dtype=np.uint8)
    
    # Arka plan gradyanƒ±
    for i in range(400):
        resim[i, :] = [i//2, 100, 255-i//2]
    
    # Geometrik ≈üekiller ekle
    cv2.rectangle(resim, (50, 50), (150, 150), (0, 255, 0), -1)
    cv2.circle(resim, (300, 100), 50, (255, 0, 0), -1)
    cv2.ellipse(resim, (200, 300), (80, 40), 45, 0, 360, (0, 255, 255), -1)
    
    # Metin ekle
    cv2.putText(resim, 'TRANSFORM', (80, 250), cv2.FONT_HERSHEY_SIMPLEX, 
                1, (255, 255, 255), 2)
    
    # Koordinat √ßizgileri
    cv2.line(resim, (200, 0), (200, 400), (128, 128, 128), 1)
    cv2.line(resim, (0, 200), (400, 200), (128, 128, 128), 1)
    
    dosya_yolu = examples_dir / "transform_test.jpg"
    cv2.imwrite(str(dosya_yolu), resim)
    print(f"‚úÖ Test resmi olu≈üturuldu: {dosya_yolu}")
    
    return str(dosya_yolu)

def dondurme_ornekleri(resim):
    """Resim d√∂nd√ºrme √∂rnekleri"""
    print("\nüîÑ Resim D√∂nd√ºrme √ñrnekleri")
    print("=" * 35)
    
    yukseklik, genislik = resim.shape[:2]
    merkez = (genislik // 2, yukseklik // 2)
    
    # 1. Basit d√∂nd√ºrme - 45 derece
    rotasyon_matrisi_45 = cv2.getRotationMatrix2D(merkez, 45, 1.0)
    dondurulmus_45 = cv2.warpAffine(resim, rotasyon_matrisi_45, (genislik, yukseklik))
    
    # 2. √ñl√ßekli d√∂nd√ºrme - 30 derece, %80 boyut
    rotasyon_matrisi_30 = cv2.getRotationMatrix2D(merkez, 30, 0.8)
    dondurulmus_30 = cv2.warpAffine(resim, rotasyon_matrisi_30, (genislik, yukseklik))
    
    # 3. Sƒ±nƒ±rlarƒ± koruyarak d√∂nd√ºrme
    rotasyon_matrisi_90 = cv2.getRotationMatrix2D(merkez, 90, 1.0)
    
    # Yeni boyutlarƒ± hesapla
    cos_val = np.abs(rotasyon_matrisi_90[0, 0])
    sin_val = np.abs(rotasyon_matrisi_90[0, 1])
    yeni_genislik = int((yukseklik * sin_val) + (genislik * cos_val))
    yeni_yukseklik = int((yukseklik * cos_val) + (genislik * sin_val))
    
    # Merkezi ayarla
    rotasyon_matrisi_90[0, 2] += (yeni_genislik / 2) - merkez[0]
    rotasyon_matrisi_90[1, 2] += (yeni_yukseklik / 2) - merkez[1]
    
    dondurulmus_90 = cv2.warpAffine(resim, rotasyon_matrisi_90, 
                                   (yeni_genislik, yeni_yukseklik))
    
    # Sonu√ßlarƒ± g√∂ster
    plt.figure(figsize=(15, 10))
    
    plt.subplot(2, 3, 1)
    plt.imshow(cv2.cvtColor(resim, cv2.COLOR_BGR2RGB))
    plt.title('Orijinal Resim')
    plt.axis('off')
    
    plt.subplot(2, 3, 2)
    plt.imshow(cv2.cvtColor(dondurulmus_45, cv2.COLOR_BGR2RGB))
    plt.title('45¬∞ D√∂nd√ºr√ºlm√º≈ü')
    plt.axis('off')
    
    plt.subplot(2, 3, 3)
    plt.imshow(cv2.cvtColor(dondurulmus_30, cv2.COLOR_BGR2RGB))
    plt.title('30¬∞ D√∂nd√ºr√ºlm√º≈ü + %80 √ñl√ßek')
    plt.axis('off')
    
    plt.subplot(2, 3, 4)
    plt.imshow(cv2.cvtColor(dondurulmus_90, cv2.COLOR_BGR2RGB))
    plt.title('90¬∞ D√∂nd√ºr√ºlm√º≈ü (Sƒ±nƒ±rlar Korundu)')
    plt.axis('off')
    
    # Rotasyon matrisini g√∂ster
    plt.subplot(2, 3, 5)
    plt.text(0.1, 0.8, f'45¬∞ Rotasyon Matrisi:\n{rotasyon_matrisi_45}', 
             fontsize=10, verticalalignment='top', fontfamily='monospace')
    plt.text(0.1, 0.4, 'Rotasyon Matrisi Formatƒ±:\n[cos(Œ∏) -sin(Œ∏) tx]\n[sin(Œ∏)  cos(Œ∏) ty]', 
             fontsize=10, verticalalignment='top')
    plt.axis('off')
    plt.title('Matris Bilgileri')
    
    plt.subplot(2, 3, 6)
    # D√∂nd√ºrme a√ßƒ±sƒ± kar≈üƒ±la≈ütƒ±rmasƒ±
    aclar = [0, 90, 180, 270]
    for i, aci in enumerate(aclar):
        if i < 4:
            rot_mat = cv2.getRotationMatrix2D(merkez, aci, 0.3)
            dondurulmus = cv2.warpAffine(resim, rot_mat, (genislik//3, yukseklik//3))
            
            # K√º√ß√ºk alt pencereler i√ßin pozisyonu hesapla
            y_offset = 0.4 if i < 2 else -0.1
            x_offset = 0.1 + (i % 2) * 0.4
            
            plt.text(x_offset, y_offset, f'{aci}¬∞', fontsize=8, 
                    transform=plt.gca().transAxes, ha='center')
    
    plt.text(0.05, 0.9, 'Farklƒ± A√ßƒ±lar:', fontsize=10, weight='bold', 
             transform=plt.gca().transAxes)
    plt.text(0.05, 0.7, '0¬∞, 90¬∞, 180¬∞, 270¬∞\na√ßƒ±larƒ±nda d√∂nd√ºrme\n√∂rnekleri', 
             fontsize=8, transform=plt.gca().transAxes)
    plt.axis('off')
    plt.title('D√∂nd√ºrme √ñrnekleri')
    
    plt.tight_layout()
    plt.show()
    
    print("üìù D√∂nd√ºrme ƒ∞pu√ßlarƒ±:")
    print("   ‚Ä¢ getRotationMatrix2D(merkez, a√ßƒ±, √∂l√ßek) kullanƒ±n")
    print("   ‚Ä¢ Pozitif a√ßƒ± saat y√∂n√ºn√ºn tersine d√∂nd√ºr√ºr")
    print("   ‚Ä¢ √ñl√ßek parametresi ile boyut deƒüi≈üikliƒüi yapabilirsiniz")
    print("   ‚Ä¢ Sƒ±nƒ±rlarƒ± korumak i√ßin yeni boyutlarƒ± hesaplayƒ±n")

def olcekleme_ornekleri(resim):
    """Resim √∂l√ßekleme √∂rnekleri"""
    print("\nüìè Resim √ñl√ßekleme √ñrnekleri")
    print("=" * 35)
    
    yukseklik, genislik = resim.shape[:2]
    
    # 1. Basit √∂l√ßekleme
    buyutulmus = cv2.resize(resim, None, fx=1.5, fy=1.5, interpolation=cv2.INTER_LINEAR)
    kucultulmus = cv2.resize(resim, None, fx=0.5, fy=0.5, interpolation=cv2.INTER_LINEAR)
    
    # 2. Belirli boyuta √∂l√ßekleme
    yeni_boyut = cv2.resize(resim, (300, 200), interpolation=cv2.INTER_LINEAR)
    
    # 3. Farklƒ± interpolasyon y√∂ntemleri
    yakin_komsuluk = cv2.resize(resim, (200, 200), interpolation=cv2.INTER_NEAREST)
    linear = cv2.resize(resim, (200, 200), interpolation=cv2.INTER_LINEAR)
    cubic = cv2.resize(resim, (200, 200), interpolation=cv2.INTER_CUBIC)
    lanczos = cv2.resize(resim, (200, 200), interpolation=cv2.INTER_LANCZOS4)
    
    # 4. En-boy oranƒ±nƒ± koruyarak √∂l√ßekleme
    def boyut_orani_koru(resim, max_boyut=300):
        h, w = resim.shape[:2]
        if w > h:
            yeni_w = max_boyut
            yeni_h = int(h * (max_boyut / w))
        else:
            yeni_h = max_boyut
            yeni_w = int(w * (max_boyut / h))
        return cv2.resize(resim, (yeni_w, yeni_h), interpolation=cv2.INTER_LINEAR)
    
    oran_korunmus = boyut_orani_koru(resim)
    
    # Sonu√ßlarƒ± g√∂ster
    plt.figure(figsize=(18, 12))
    
    plt.subplot(3, 4, 1)
    plt.imshow(cv2.cvtColor(resim, cv2.COLOR_BGR2RGB))
    plt.title(f'Orijinal\n{genislik}x{yukseklik}')
    plt.axis('off')
    
    plt.subplot(3, 4, 2)
    plt.imshow(cv2.cvtColor(buyutulmus, cv2.COLOR_BGR2RGB))
    plt.title(f'%150 B√ºy√ºt√ºlm√º≈ü\n{buyutulmus.shape[1]}x{buyutulmus.shape[0]}')
    plt.axis('off')
    
    plt.subplot(3, 4, 3)
    plt.imshow(cv2.cvtColor(kucultulmus, cv2.COLOR_BGR2RGB))
    plt.title(f'%50 K√º√ß√ºlt√ºlm√º≈ü\n{kucultulmus.shape[1]}x{kucultulmus.shape[0]}')
    plt.axis('off')
    
    plt.subplot(3, 4, 4)
    plt.imshow(cv2.cvtColor(yeni_boyut, cv2.COLOR_BGR2RGB))
    plt.title(f'Sabit Boyut\n{yeni_boyut.shape[1]}x{yeni_boyut.shape[0]}')
    plt.axis('off')
    
    # ƒ∞nterpolasyon kar≈üƒ±la≈ütƒ±rmasƒ±
    plt.subplot(3, 4, 5)
    plt.imshow(cv2.cvtColor(yakin_komsuluk, cv2.COLOR_BGR2RGB))
    plt.title('NEAREST\n(En yakƒ±n kom≈üu)')
    plt.axis('off')
    
    plt.subplot(3, 4, 6)
    plt.imshow(cv2.cvtColor(linear, cv2.COLOR_BGR2RGB))
    plt.title('LINEAR\n(Doƒürusal)')
    plt.axis('off')
    
    plt.subplot(3, 4, 7)
    plt.imshow(cv2.cvtColor(cubic, cv2.COLOR_BGR2RGB))
    plt.title('CUBIC\n(K√ºbik)')
    plt.axis('off')
    
    plt.subplot(3, 4, 8)
    plt.imshow(cv2.cvtColor(lanczos, cv2.COLOR_BGR2RGB))
    plt.title('LANCZOS4\n(Lanczos)')
    plt.axis('off')
    
    plt.subplot(3, 4, 9)
    plt.imshow(cv2.cvtColor(oran_korunmus, cv2.COLOR_BGR2RGB))
    plt.title(f'Oran Korundu\n{oran_korunmus.shape[1]}x{oran_korunmus.shape[0]}')
    plt.axis('off')
    
    # ƒ∞nterpolasyon a√ßƒ±klamasƒ±
    plt.subplot(3, 4, 10)
    plt.text(0.05, 0.95, 'ƒ∞nterpolasyon T√ºrleri:', fontsize=12, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.80, '‚Ä¢ NEAREST: En hƒ±zlƒ±, pikselle≈ümi≈ü\n‚Ä¢ LINEAR: Hƒ±zlƒ±, d√ºzg√ºn\n‚Ä¢ CUBIC: Yava≈ü, √ßok d√ºzg√ºn\n‚Ä¢ LANCZOS4: En yava≈ü, en kaliteli', 
             fontsize=10, verticalalignment='top')
    plt.text(0.05, 0.40, 'Kullanƒ±m √ñnerileri:', fontsize=12, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.25, '‚Ä¢ B√ºy√ºtme: CUBIC veya LANCZOS4\n‚Ä¢ K√º√ß√ºltme: LINEAR yeterli\n‚Ä¢ Hƒ±z gerekirse: NEAREST', 
             fontsize=10, verticalalignment='top')
    plt.axis('off')
    
    plt.tight_layout()
    plt.show()
    
    print("üìù √ñl√ßekleme ƒ∞pu√ßlarƒ±:")
    print("   ‚Ä¢ fx, fy parametreleri ile oran belirleyin")
    print("   ‚Ä¢ B√ºy√ºtmede kalite i√ßin CUBIC veya LANCZOS4 kullanƒ±n")
    print("   ‚Ä¢ K√º√ß√ºltmede LINEAR genellikle yeterlidir")
    print("   ‚Ä¢ En-boy oranƒ±nƒ± korumak i√ßin hesaplama yapƒ±n")

def oteleme_ornekleri(resim):
    """Resim √∂teleme √∂rnekleri"""
    print("\n‚û°Ô∏è Resim √ñteleme √ñrnekleri")
    print("=" * 35)
    
    yukseklik, genislik = resim.shape[:2]
    
    # 1. Basit √∂teleme
    oteleme_matrisi_1 = np.float32([[1, 0, 50], [0, 1, 30]])  # x=50, y=30 √∂teleme
    otelenmis_1 = cv2.warpAffine(resim, oteleme_matrisi_1, (genislik, yukseklik))
    
    # 2. Negatif √∂teleme
    oteleme_matrisi_2 = np.float32([[1, 0, -30], [0, 1, -20]])
    otelenmis_2 = cv2.warpAffine(resim, oteleme_matrisi_2, (genislik, yukseklik))
    
    # 3. B√ºy√ºk √∂teleme - sƒ±nƒ±rlar dƒ±≈üƒ±na √ßƒ±kan kƒ±sƒ±mlar
    oteleme_matrisi_3 = np.float32([[1, 0, 100], [0, 1, 80]])
    otelenmis_3 = cv2.warpAffine(resim, oteleme_matrisi_3, (genislik, yukseklik))
    
    # 4. Sƒ±nƒ±rlarƒ± geni≈ületerek √∂teleme
    oteleme_matrisi_4 = np.float32([[1, 0, 100], [0, 1, 80]])
    otelenmis_4 = cv2.warpAffine(resim, oteleme_matrisi_4, 
                                (genislik + 150, yukseklik + 120))
    
    # 5. Farklƒ± dolgu modlarƒ±
    # BORDER_CONSTANT - sabit renk ile doldur
    otelenmis_constant = cv2.warpAffine(resim, oteleme_matrisi_1, (genislik, yukseklik),
                                       borderMode=cv2.BORDER_CONSTANT, borderValue=(255, 0, 0))
    
    # BORDER_REFLECT - yansƒ±tmalƒ± dolgu
    otelenmis_reflect = cv2.warpAffine(resim, oteleme_matrisi_1, (genislik, yukseklik),
                                      borderMode=cv2.BORDER_REFLECT)
    
    # BORDER_WRAP - sarmalƒ± dolgu  
    otelenmis_wrap = cv2.warpAffine(resim, oteleme_matrisi_1, (genislik, yukseklik),
                                   borderMode=cv2.BORDER_WRAP)
    
    # Sonu√ßlarƒ± g√∂ster
    plt.figure(figsize=(18, 12))
    
    plt.subplot(3, 4, 1)
    plt.imshow(cv2.cvtColor(resim, cv2.COLOR_BGR2RGB))
    plt.title('Orijinal Resim')
    plt.axis('off')
    
    plt.subplot(3, 4, 2)
    plt.imshow(cv2.cvtColor(otelenmis_1, cv2.COLOR_BGR2RGB))
    plt.title('√ñteleme (+50, +30)')
    plt.axis('off')
    
    plt.subplot(3, 4, 3)
    plt.imshow(cv2.cvtColor(otelenmis_2, cv2.COLOR_BGR2RGB))
    plt.title('√ñteleme (-30, -20)')
    plt.axis('off')
    
    plt.subplot(3, 4, 4)
    plt.imshow(cv2.cvtColor(otelenmis_3, cv2.COLOR_BGR2RGB))
    plt.title('B√ºy√ºk √ñteleme (+100, +80)')
    plt.axis('off')
    
    plt.subplot(3, 4, 5)
    plt.imshow(cv2.cvtColor(otelenmis_4, cv2.COLOR_BGR2RGB))
    plt.title('Geni≈ületilmi≈ü Sƒ±nƒ±rlar')
    plt.axis('off')
    
    plt.subplot(3, 4, 6)
    plt.imshow(cv2.cvtColor(otelenmis_constant, cv2.COLOR_BGR2RGB))
    plt.title('BORDER_CONSTANT\n(Kƒ±rmƒ±zƒ± dolgu)')
    plt.axis('off')
    
    plt.subplot(3, 4, 7)
    plt.imshow(cv2.cvtColor(otelenmis_reflect, cv2.COLOR_BGR2RGB))
    plt.title('BORDER_REFLECT\n(Yansƒ±tmalƒ±)')
    plt.axis('off')
    
    plt.subplot(3, 4, 8)
    plt.imshow(cv2.cvtColor(otelenmis_wrap, cv2.COLOR_BGR2RGB))
    plt.title('BORDER_WRAP\n(Sarmalƒ±)')
    plt.axis('off')
    
    # √ñteleme matrisi a√ßƒ±klamasƒ±
    plt.subplot(3, 4, 9)
    plt.text(0.05, 0.95, '√ñteleme Matrisi Format:', fontsize=12, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.80, '[[1, 0, tx],\n [0, 1, ty]]', fontsize=14, verticalalignment='top',
             fontfamily='monospace', bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgray"))
    plt.text(0.05, 0.50, 'tx: X ekseni √∂telemesi\nty: Y ekseni √∂telemesi', 
             fontsize=11, verticalalignment='top')
    plt.text(0.05, 0.25, 'Pozitif deƒüerler:\n‚Ä¢ tx: Saƒüa √∂teleme\n‚Ä¢ ty: A≈üaƒüƒ± √∂teleme', 
             fontsize=10, verticalalignment='top')
    plt.axis('off')
    
    plt.tight_layout()
    plt.show()
    
    print("üìù √ñteleme ƒ∞pu√ßlarƒ±:")
    print("   ‚Ä¢ √ñteleme matrisi: [[1, 0, tx], [0, 1, ty]]")
    print("   ‚Ä¢ Pozitif tx saƒüa, pozitif ty a≈üaƒüƒ± √∂teleme")
    print("   ‚Ä¢ Sƒ±nƒ±r dƒ±≈üƒ± alanlar i√ßin borderMode kullanƒ±n")
    print("   ‚Ä¢ B√ºy√ºk √∂telemeler i√ßin canvas boyutunu artƒ±rƒ±n")

def affine_donusum_ornekleri(resim):
    """Affine d√∂n√º≈ü√ºm √∂rnekleri"""
    print("\nüîÄ Affine D√∂n√º≈ü√ºm √ñrnekleri")
    print("=" * 35)
    
    yukseklik, genislik = resim.shape[:2]
    
    # 1. 3 nokta ile affine d√∂n√º≈ü√ºm
    # Kaynak noktalar
    pts1 = np.float32([[50, 50], [200, 50], [50, 200]])
    # Hedef noktalar (parallelogram ≈üekli)
    pts2 = np.float32([[10, 100], [200, 50], [100, 250]])
    
    # Affine matrisi hesapla
    affine_matrix_1 = cv2.getAffineTransform(pts1, pts2)
    affine_donusum_1 = cv2.warpAffine(resim, affine_matrix_1, (genislik, yukseklik))
    
    # 2. Farklƒ± affine d√∂n√º≈ü√ºm - kayma (shear)
    pts3 = np.float32([[0, 0], [genislik-1, 0], [0, yukseklik-1]])
    pts4 = np.float32([[50, 0], [genislik-1, 50], [0, yukseklik-1]])
    
    affine_matrix_2 = cv2.getAffineTransform(pts3, pts4)
    affine_donusum_2 = cv2.warpAffine(resim, affine_matrix_2, (genislik, yukseklik))
    
    # 3. Kombine affine d√∂n√º≈ü√ºm (d√∂nd√ºrme + √∂l√ßekleme + √∂teleme)
    merkez = (genislik//2, yukseklik//2)
    dondurme_matrix = cv2.getRotationMatrix2D(merkez, 30, 0.8)
    # Ek √∂teleme ekle
    dondurme_matrix[0, 2] += 50
    dondurme_matrix[1, 2] += 30
    
    kombine_donusum = cv2.warpAffine(resim, dondurme_matrix, (genislik, yukseklik))
    
    # 4. Manuel affine matrisi olu≈üturma
    # Kayma d√∂n√º≈ü√ºm√º
    kayma_matrisi = np.float32([[1, 0.3, 0],    # x = x + 0.3*y
                                [0.2, 1, 0]])    # y = 0.2*x + y
    kayma_donusum = cv2.warpAffine(resim, kayma_matrisi, (genislik + 100, yukseklik + 100))
    
    # Noktalarƒ± g√∂rselle≈ütirmek i√ßin yardƒ±mcƒ± fonksiyon
    def noktalari_ciz(resim, noktalar, renk=(0, 255, 0), yaricap=5):
        resim_kopya = resim.copy()
        for nokta in noktalar:
            cv2.circle(resim_kopya, tuple(nokta.astype(int)), yaricap, renk, -1)
        return resim_kopya
    
    # Noktalƒ± versiyonlar
    resim_noktali = noktalari_ciz(resim, pts1, (0, 255, 0))
    donusum_noktali = noktalari_ciz(affine_donusum_1, pts2, (255, 0, 0))
    
    # Sonu√ßlarƒ± g√∂ster
    plt.figure(figsize=(18, 12))
    
    plt.subplot(3, 4, 1)
    plt.imshow(cv2.cvtColor(resim_noktali, cv2.COLOR_BGR2RGB))
    plt.title('Orijinal + Kaynak Noktalar\n(Ye≈üil)')
    plt.axis('off')
    
    plt.subplot(3, 4, 2)
    plt.imshow(cv2.cvtColor(donusum_noktali, cv2.COLOR_BGR2RGB))
    plt.title('Affine D√∂n√º≈ü√ºm\n(Kƒ±rmƒ±zƒ±: Hedef noktalar)')
    plt.axis('off')
    
    plt.subplot(3, 4, 3)
    plt.imshow(cv2.cvtColor(affine_donusum_2, cv2.COLOR_BGR2RGB))
    plt.title('Kayma D√∂n√º≈ü√ºm√º\n(Shear)')
    plt.axis('off')
    
    plt.subplot(3, 4, 4)
    plt.imshow(cv2.cvtColor(kombine_donusum, cv2.COLOR_BGR2RGB))
    plt.title('Kombine D√∂n√º≈ü√ºm\n(D√∂nd√ºr+√ñl√ßekle+√ñtele)')
    plt.axis('off')
    
    plt.subplot(3, 4, 5)
    plt.imshow(cv2.cvtColor(kayma_donusum, cv2.COLOR_BGR2RGB))
    plt.title('Manuel Kayma Matrisi')
    plt.axis('off')
    
    # Matris bilgileri
    plt.subplot(3, 4, 6)
    plt.text(0.05, 0.95, 'ƒ∞lk Affine Matris:', fontsize=11, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.80, f'{affine_matrix_1}', fontsize=8, verticalalignment='top',
             fontfamily='monospace')
    plt.text(0.05, 0.45, 'Kaynak Noktalar:', fontsize=11, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.30, f'{pts1}', fontsize=8, verticalalignment='top',
             fontfamily='monospace')
    plt.text(0.05, 0.10, 'Hedef Noktalar:', fontsize=11, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, -0.05, f'{pts2}', fontsize=8, verticalalignment='top',
             fontfamily='monospace')
    plt.axis('off')
    
    plt.subplot(3, 4, 7)
    plt.text(0.05, 0.95, 'Affine D√∂n√º≈ü√ºm √ñzellikleri:', fontsize=11, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.80, '‚úì Paralel √ßizgiler paralel kalƒ±r\n‚úì Oranlar korunur\n‚úì 3 nokta ile tanƒ±mlanƒ±r', 
             fontsize=10, verticalalignment='top')
    plt.text(0.05, 0.45, 'Kullanƒ±m Alanlarƒ±:', fontsize=11, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.30, '‚Ä¢ Belge d√ºzeltme\n‚Ä¢ Perspektif sim√ºlasyonu\n‚Ä¢ Resim √ßarpƒ±tma efektleri', 
             fontsize=10, verticalalignment='top')
    plt.axis('off')
    
    plt.tight_layout()
    plt.show()
    
    print("üìù Affine D√∂n√º≈ü√ºm ƒ∞pu√ßlarƒ±:")
    print("   ‚Ä¢ getAffineTransform() ile 3 nokta √ßifti kullanƒ±n")
    print("   ‚Ä¢ Paralel √ßizgiler paralel kalƒ±r, a√ßƒ±lar deƒüi≈üebilir")
    print("   ‚Ä¢ D√∂nd√ºrme, √∂l√ßekleme, √∂teleme, kayma kombinasyonu")
    print("   ‚Ä¢ Manuel matris: [[a, b, tx], [c, d, ty]]")

def perspektif_donusum_ornekleri(resim):
    """Perspektif d√∂n√º≈ü√ºm √∂rnekleri"""
    print("\nüèõÔ∏è Perspektif D√∂n√º≈ü√ºm √ñrnekleri")
    print("=" * 35)
    
    yukseklik, genislik = resim.shape[:2]
    
    # 1. Belge d√ºzeltme sim√ºlasyonu
    # Eƒüimli belge k√∂≈üe noktalarƒ± (perspektif bozulmu≈ü)
    pts1 = np.float32([[50, 80], [350, 50], [380, 350], [20, 320]])
    # D√ºzeltilmi≈ü dikd√∂rtgen k√∂≈üeler
    pts2 = np.float32([[0, 0], [300, 0], [300, 300], [0, 300]])
    
    perspektif_matrix_1 = cv2.getPerspectiveTransform(pts1, pts2)
    perspektif_donusum_1 = cv2.warpPerspective(resim, perspektif_matrix_1, (300, 300))
    
    # 2. 3D efekti - trapezoid'den dikd√∂rtgene
    pts3 = np.float32([[0, 0], [genislik, 0], [genislik, yukseklik], [0, yukseklik]])
    pts4 = np.float32([[100, 0], [genislik-100, 0], [genislik, yukseklik], [0, yukseklik]])
    
    perspektif_matrix_2 = cv2.getPerspectiveTransform(pts3, pts4)
    perspektif_donusum_2 = cv2.warpPerspective(resim, perspektif_matrix_2, 
                                               (genislik, yukseklik))
    
    # 3. Ters perspektif - dikd√∂rtgenden trapezoid'e
    pts5 = np.float32([[0, 0], [genislik, 0], [genislik, yukseklik], [0, yukseklik]])
    pts6 = np.float32([[50, 100], [genislik-50, 80], [genislik-20, yukseklik-50], [70, yukseklik-70]])
    
    perspektif_matrix_3 = cv2.getPerspectiveTransform(pts5, pts6)
    perspektif_donusum_3 = cv2.warpPerspective(resim, perspektif_matrix_3, 
                                               (genislik, yukseklik))
    
    # 4. Extreme perspektif - "sonsuzluk noktasƒ±" efekti
    pts7 = np.float32([[0, 0], [genislik, 0], [genislik, yukseklik], [0, yukseklik]])
    pts8 = np.float32([[150, 50], [genislik-150, 50], [300, 300], [100, 300]])
    
    perspektif_matrix_4 = cv2.getPerspectiveTransform(pts7, pts8)
    perspektif_donusum_4 = cv2.warpPerspective(resim, perspektif_matrix_4, 
                                               (genislik, yukseklik))
    
    # Noktalarƒ± g√∂rselle≈ütirmek i√ßin yardƒ±mcƒ± fonksiyon
    def perspektif_noktalari_ciz(resim, kaynak_pts, hedef_pts):
        resim_kopya = resim.copy()
        
        # Kaynak noktalarƒ± ye≈üil ile i≈üaretle
        for i, nokta in enumerate(kaynak_pts):
            cv2.circle(resim_kopya, tuple(nokta.astype(int)), 8, (0, 255, 0), -1)
            cv2.putText(resim_kopya, str(i+1), tuple(nokta.astype(int) + [10, -10]), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        
        # Kaynak noktalarƒ± √ßizgi ile birle≈ütir
        cv2.polylines(resim_kopya, [kaynak_pts.astype(int)], True, (0, 255, 0), 2)
        
        return resim_kopya
    
    # Noktalƒ± versiyonlar
    resim_noktali_1 = perspektif_noktalari_ciz(resim, pts1, pts2)
    resim_noktali_2 = perspektif_noktalari_ciz(resim, pts3, pts4)
    
    # Sonu√ßlarƒ± g√∂ster
    plt.figure(figsize=(20, 15))
    
    plt.subplot(4, 4, 1)
    plt.imshow(cv2.cvtColor(resim_noktali_1, cv2.COLOR_BGR2RGB))
    plt.title('Orijinal + Kaynak Noktalar\n(Eƒüimli belge)')
    plt.axis('off')
    
    plt.subplot(4, 4, 2)
    plt.imshow(cv2.cvtColor(perspektif_donusum_1, cv2.COLOR_BGR2RGB))
    plt.title('Perspektif D√ºzeltilmi≈ü\n(Belge d√ºzeltme)')
    plt.axis('off')
    
    plt.subplot(4, 4, 3)
    plt.imshow(cv2.cvtColor(resim_noktali_2, cv2.COLOR_BGR2RGB))
    plt.title('3D Efekt Kaynak')
    plt.axis('off')
    
    plt.subplot(4, 4, 4)
    plt.imshow(cv2.cvtColor(perspektif_donusum_2, cv2.COLOR_BGR2RGB))
    plt.title('3D Efekt Uygulanmƒ±≈ü\n(Trapezoid)')
    plt.axis('off')
    
    plt.subplot(4, 4, 5)
    plt.imshow(cv2.cvtColor(resim, cv2.COLOR_BGR2RGB))
    plt.title('Orijinal Resim')
    plt.axis('off')
    
    plt.subplot(4, 4, 6)
    plt.imshow(cv2.cvtColor(perspektif_donusum_3, cv2.COLOR_BGR2RGB))
    plt.title('Ters Perspektif\n(Trapezoid efekti)')
    plt.axis('off')
    
    plt.subplot(4, 4, 7)
    plt.imshow(cv2.cvtColor(perspektif_donusum_4, cv2.COLOR_BGR2RGB))
    plt.title('Extreme Perspektif\n("Sonsuzluk noktasƒ±")')
    plt.axis('off')
    
    # Matris bilgileri
    plt.subplot(4, 4, 8)
    plt.text(0.05, 0.95, 'Perspektif Matris (3x3):', fontsize=10, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.80, f'{perspektif_matrix_1[0]}\n{perspektif_matrix_1[1]}\n{perspektif_matrix_1[2]}', 
             fontsize=7, verticalalignment='top', fontfamily='monospace')
    plt.text(0.05, 0.35, 'Affine vs Perspektif:', fontsize=10, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.20, '‚Ä¢ Affine: 3 nokta, 2x3 matris\n‚Ä¢ Perspektif: 4 nokta, 3x3 matris\n‚Ä¢ Perspektif: Paralel √ßizgiler kesi≈üebilir', 
             fontsize=8, verticalalignment='top')
    plt.axis('off')
    
    # Kullanƒ±m alanlarƒ±
    plt.subplot(4, 4, 9)
    plt.text(0.05, 0.95, 'Kullanƒ±m Alanlarƒ±:', fontsize=12, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.80, 'üìÑ Belge tarama ve d√ºzeltme\nüè¢ Mimari fotoƒüraf d√ºzeltme\nüé® Sanatsal efektler\nüì± QR kod okuma', 
             fontsize=10, verticalalignment='top')
    plt.text(0.05, 0.35, 'Dikkat Edilecekler:', fontsize=12, weight='bold', 
             verticalalignment='top')
    plt.text(0.05, 0.20, '‚ö†Ô∏è Extreme d√∂n√º≈ü√ºmler piksel kaybƒ±na neden olur\n‚ö†Ô∏è 4 nokta sƒ±ralƒ± olmalƒ±\n‚ö†Ô∏è Noktalar √ßakƒ±≈ümamalƒ±', 
             fontsize=10, verticalalignment='top')
    plt.axis('off')
    
    # Nokta sƒ±ralama √∂rneƒüi
    plt.subplot(4, 4, 10)
    plt.text(0.05, 0.95, 'Doƒüru Nokta Sƒ±ralamasƒ±:', fontsize=11, weight='bold', 
             verticalalignment='top')
    
    # Basit ≈üema √ßiz
    plt.plot([0.2, 0.8, 0.8, 0.2, 0.2], [0.8, 0.8, 0.2, 0.2, 0.8], 'b-', linewidth=2)
    plt.text(0.15, 0.85, '1', fontsize=14, weight='bold', color='red')
    plt.text(0.85, 0.85, '2', fontsize=14, weight='bold', color='red')
    plt.text(0.85, 0.15, '3', fontsize=14, weight='bold', color='red')
    plt.text(0.15, 0.15, '4', fontsize=14, weight='bold', color='red')
    
    plt.text(0.05, 0.05, 'Saat y√∂n√ºnde: Sol √ºst ‚Üí Saƒü √ºst ‚Üí Saƒü alt ‚Üí Sol alt', 
             fontsize=8, verticalalignment='bottom')
    plt.xlim(0, 1)
    plt.ylim(0, 1)
    plt.axis('off')
    
    plt.tight_layout()
    plt.show()
    
    print("üìù Perspektif D√∂n√º≈ü√ºm ƒ∞pu√ßlarƒ±:")
    print("   ‚Ä¢ getPerspectiveTransform() ile 4 nokta √ßifti kullanƒ±n")
    print("   ‚Ä¢ Paralel √ßizgiler kesi≈üebilir (3D efekt)")
    print("   ‚Ä¢ Belge tarama i√ßin ideal")
    print("   ‚Ä¢ Noktalar saat y√∂n√ºnde sƒ±ralanmalƒ±")
    print("   ‚Ä¢ warpPerspective() fonksiyonunu kullanƒ±n")

def interaktif_transform_demo():
    """ƒ∞nteraktif transformasyon demosu"""
    print("\nüéÆ ƒ∞nteraktif Transformasyon Demosu")
    print("=" * 40)
    print("Trackbar'larƒ± kullanarak ger√ßek zamanlƒ± d√∂n√º≈ü√ºm g√∂r√ºn!")
    
    # Test resmi olu≈ütur veya y√ºkle
    resim_yolu = ornek_resim_olustur()
    resim = cv2.imread(resim_yolu)
    
    if resim is None:
        print("‚ùå Resim y√ºklenemedi!")
        return
    
    # Resmi k√º√ß√ºlt (performans i√ßin)
    resim = cv2.resize(resim, (300, 300))
    yukseklik, genislik = resim.shape[:2]
    merkez = (genislik//2, yukseklik//2)
    
    # Pencere olu≈ütur
    window_name = 'Interactive Transform'
    cv2.namedWindow(window_name, cv2.WINDOW_AUTOSIZE)
    
    # Trackbar'lar olu≈ütur
    cv2.createTrackbar('Rotation', window_name, 0, 360, lambda x: None)
    cv2.createTrackbar('Scale %', window_name, 100, 200, lambda x: None)
    cv2.createTrackbar('X Move', window_name, 150, 300, lambda x: None)
    cv2.createTrackbar('Y Move', window_name, 150, 300, lambda x: None)
    cv2.createTrackbar('Shear X', window_name, 50, 100, lambda x: None)
    cv2.createTrackbar('Shear Y', window_name, 50, 100, lambda x: None)
    
    print("üéõÔ∏è Kontroller:")
    print("   ‚Ä¢ D√∂nd√ºrme A√ßƒ±sƒ±: 0-360 derece")
    print("   ‚Ä¢ √ñl√ßek: %50-200")
    print("   ‚Ä¢ X/Y √ñteleme: -150 ile +150 piksel")
    print("   ‚Ä¢ Kayma: -50 ile +50")
    print("   ‚Ä¢ ESC tu≈üu ile √ßƒ±kƒ±≈ü")
    
    while True:
        # Trackbar deƒüerlerini oku
        aci = cv2.getTrackbarPos('Rotation', window_name)
        olcek = cv2.getTrackbarPos('Scale %', window_name) / 100.0
        x_oteleme = cv2.getTrackbarPos('X Move', window_name) - 150
        y_oteleme = cv2.getTrackbarPos('Y Move', window_name) - 150
        kayma_x = (cv2.getTrackbarPos('Shear X', window_name) - 50) / 100.0
        kayma_y = (cv2.getTrackbarPos('Shear Y', window_name) - 50) / 100.0
        
        # Minimum √∂l√ßek kontrol√º
        if olcek < 0.1:
            olcek = 0.1
        
        # Rotasyon ve √∂l√ßekleme matrisi
        rot_matrix = cv2.getRotationMatrix2D(merkez, aci, olcek)
        
        # √ñteleme ekle
        rot_matrix[0, 2] += x_oteleme
        rot_matrix[1, 2] += y_oteleme
        
        # Kayma ekle
        rot_matrix[0, 0] += kayma_x
        rot_matrix[1, 1] += kayma_y
        
        # D√∂n√º≈ü√ºm√º uygula
        donusturulmus = cv2.warpAffine(resim, rot_matrix, (genislik + 200, yukseklik + 200),
                                      borderMode=cv2.BORDER_CONSTANT, borderValue=(50, 50, 50))
        
        # Bilgi metnini ekle
        cv2.putText(donusturulmus, f'Aci: {aci}', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
        cv2.putText(donusturulmus, f'Olcek: {olcek:.2f}', (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
        cv2.putText(donusturulmus, f'Oteleme: ({x_oteleme}, {y_oteleme})', (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
        cv2.putText(donusturulmus, f'Kayma: ({kayma_x:.2f}, {kayma_y:.2f})', (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
        cv2.putText(donusturulmus, 'ESC = Cikis', (10, 470), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 1)
        
        # Merkez noktasƒ±nƒ± i≈üaretle
        cv2.circle(donusturulmus, (merkez[0] + x_oteleme + 100, merkez[1] + y_oteleme + 100), 
                   3, (0, 0, 255), -1)
        
        # Sonucu g√∂ster
        cv2.imshow(window_name, donusturulmus)
        
        # ESC tu≈üu kontrol√º
        key = cv2.waitKey(30) & 0xFF
        if key == 27:  # ESC tu≈üu
            break
    
    cv2.destroyAllWindows()
    print("‚úÖ ƒ∞nteraktif demo tamamlandƒ±!")

def main():
    """Ana program"""
    print("üîÑ OpenCV Geometrik Transformasyonlar")
    print("Bu program, geometrik transformasyon tekniklerini g√∂sterir.\n")
    
    # √ñrnek resim olu≈ütur
    resim_yolu = ornek_resim_olustur()
    resim = cv2.imread(resim_yolu)
    
    if resim is None:
        print("‚ùå Test resmi olu≈üturulamadƒ±!")
        return
    
    while True:
        print("\n" + "=" * 50)
        print("üîÑ Geometrik Transformasyonlar Men√ºs√º")
        print("=" * 50)
        print("1. D√∂nd√ºrme √ñrnekleri")
        print("2. √ñl√ßekleme √ñrnekleri") 
        print("3. √ñteleme √ñrnekleri")
        print("4. Affine D√∂n√º≈ü√ºm √ñrnekleri")
        print("5. Perspektif D√∂n√º≈ü√ºm √ñrnekleri")
        print("6. ƒ∞nteraktif Transformasyon Demosu")
        print("0. √áƒ±kƒ±≈ü")
        
        try:
            secim = input("\nL√ºtfen bir se√ßenek girin (0-6): ").strip()
            
            if secim == '0':
                print("üëã G√∂r√º≈ümek √ºzere!")
                break
            elif secim == '1':
                dondurme_ornekleri(resim)
            elif secim == '2':
                olcekleme_ornekleri(resim)
            elif secim == '3':
                oteleme_ornekleri(resim)
            elif secim == '4':
                affine_donusum_ornekleri(resim)
            elif secim == '5':
                perspektif_donusum_ornekleri(resim)
            elif secim == '6':
                interaktif_transform_demo()
            else:
                print("‚ùå Ge√ßersiz se√ßenek! L√ºtfen 0-6 arasƒ±nda bir sayƒ± girin.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Program kullanƒ±cƒ± tarafƒ±ndan sonlandƒ±rƒ±ldƒ±!")
            break
        except Exception as e:
            print(f"‚ùå Bir hata olu≈ütu: {e}")

if __name__ == "__main__":
    main()